#include "Arduino.h"
#include "Wire.h"

// Register address
#define SI1132_PART_ID_REG 0x00
#define SI1132_UCOEF0_REG 0x13
#define SI1132_UCOEF1_REG 0x14
#define SI1132_UCOEF2_REG 0x15
#define SI1132_UCOEF3_REG 0x16
#define SI1132_CHIPLIST_REG 0x01
#define SI1132_MEASRATE0_REG 0x08
#define SI1132_ALS_ENCODING_REG 0x06
#define SI1132_ALS_VIS_ADC_COUNTER_REG 0x10
#define SI1132_ALS_VIS_ADC_GAIN_REG 0x11
#define SI1132_ALS_VIS_ADC_MISC_REG 0x12
#define SI1132_ALS_IR_ADC_COUNTER_REG 0x1D
#define SI1132_ALS_IR_ADC_GAIN_REG 0x1E
#define SI1132_ALS_IR_ADC_MISC_REG 0x1F
#define SI1132_ALS_IR_ADCMUX_REG 0x0E
#define SI1132_AUX_ADCMUX_REG 0x0F
#define SI1132_COMMAND_REG 0x18
#define SI1132_AUX_DATA_REG 0x2C
#define SI1132_IR_DATA_REG 0x24
#define SI1132_VISIBLE_DATA_REG 0x22

#define SI1132_EN_UV 0b10000000
#define SI1132_EN_AUX 0b01000000
#define SI1132_EN_ALS_IR 0b00100000
#define SI1132_EN_ALS_VIS 0b00010000

#define SI1132_ALS_VIS_ALIGN 0b00010000
#define SI1132_ALS_VIS_ALIGN 0b00100000

#define SI1132_1_ADC_CLOCK 0b00000000
#define SI1132_7_ADC_CLOCK 0b00010000
#define SI1132_15_ADC_CLOCK 0b00100000
#define SI1132_31_ADC_CLOCK 0b00110000
#define SI1132_63_ADC_CLOCK 0b01000000
#define SI1132_127_ADC_CLOCK 0b10100000
#define SI1132_255_ADC_CLOCK 0b01100000
#define SI1132_511_ADC_CLOCK 0b01110000

#define SI1132_1_DIVIDED_ADC_CLOCK 0b0000000
#define SI1132_16_DEVIDED_ADC_CLOCK 0b0000100
#define SI1132_64_DEVIDED_ADC_CLOCK 0b0000110

#define SI1132_NORMAL_SIGNAL_RANGE 0b00000000
#define SI1132_HIGH_SIGNAL_RANGE 0b00100000

#define SI1132_ALS_IR_ADCMUX_SMALLIR 0x00

#define SI1132_AUX_ADCMUX_TEMPERATURE 0x65
#define SI1132_AUX_ADCMUX_VDD 0x75

#define SI1132_COMMAND_ALS_AUTO 0x0E
#define SI1132_COMMAND_RESET 0x01


class si1132
{
public:
  uint16_t readUV(void);
  uint16_t readIR(void);
  uint16_t readVisible(void);
  void reset(void);
  void configuration(void);
  bool searchDevice(void);
private:
  void readI2c(byte register_addr, int num, byte *buf);
  void writeI2c(byte register_addr, byte value);
};

extern si1132 faboUV;
